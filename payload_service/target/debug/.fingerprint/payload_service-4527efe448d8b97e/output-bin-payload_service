{"message":"cannot find value `result` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/model.rs","byte_start":2333,"byte_end":2339,"line_start":85,"line_end":85,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"        Ok(result.data)","highlight_start":12,"highlight_end":18}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `result` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/model.rs:85:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Ok(result.data)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find function `getter` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/model.rs","byte_start":2521,"byte_end":2527,"line_start":93,"line_end":93,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"        let result = getter(command)?;","highlight_start":22,"highlight_end":28}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function `getter` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/model.rs:93:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let result = getter(command)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find function `getter` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/model.rs","byte_start":3237,"byte_end":3243,"line_start":120,"line_end":120,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"        let result = getter(command)?;","highlight_start":22,"highlight_end":28}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function `getter` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/model.rs:120:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let result = getter(command)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `SetPower` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/schema.rs","byte_start":817,"byte_end":825,"line_start":37,"line_end":37,"column_start":17,"column_end":25,"is_primary":true,"text":[{"text":"graphql_object!(SetPower: Context as \"SetPower\" |&self| {","highlight_start":17,"highlight_end":25}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/schema.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::model::{Subsystem, TxSuccess, RxReading, CalibrateThermometer};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::model::SetPower;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `SetPower` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/schema.rs:37:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mgraphql_object!(SetPower: Context as \"SetPower\" |&self| {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::model::SetPower;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"cannot find type `SetPower` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/schema.rs","byte_start":2058,"byte_end":2066,"line_start":81,"line_end":81,"column_start":61,"column_end":69,"is_primary":true,"text":[{"text":"    field set_power(&executor, power : bool) -> FieldResult<SetPower> ","highlight_start":61,"highlight_end":69}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/schema.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::model::{Subsystem, TxSuccess, RxReading, CalibrateThermometer};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::model::SetPower;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `SetPower` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/schema.rs:81:61\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    field set_power(&executor, power : bool) -> FieldResult<SetPower> \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::model::SetPower;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around `if` condition","code":{"code":"unused_parens","explanation":null},"level":"error","spans":[{"file_name":"src/model.rs","byte_start":2551,"byte_end":2552,"line_start":95,"line_end":95,"column_start":12,"column_end":13,"is_primary":true,"text":[{"text":"        if (result == \"true\") {","highlight_start":12,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/model.rs","byte_start":2568,"byte_end":2569,"line_start":95,"line_end":95,"column_start":29,"column_end":30,"is_primary":true,"text":[{"text":"        if (result == \"true\") {","highlight_start":29,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":8,"byte_end":16,"line_start":1,"line_end":1,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"#![deny(warnings)]","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`#[deny(unused_parens)]` implied by `#[deny(warnings)]`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/model.rs","byte_start":2551,"byte_end":2552,"line_start":95,"line_end":95,"column_start":12,"column_end":13,"is_primary":true,"text":[{"text":"        if (result == \"true\") {","highlight_start":12,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/model.rs","byte_start":2568,"byte_end":2569,"line_start":95,"line_end":95,"column_start":29,"column_end":30,"is_primary":true,"text":[{"text":"        if (result == \"true\") {","highlight_start":29,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around `if` condition\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/model.rs:95:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if (result == \"true\") {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#![deny(warnings)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[deny(unused_parens)]` implied by `#[deny(warnings)]`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        if \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mresult == \"true\"\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        if result == \"true\" {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unused import: `RxReading`","code":{"code":"unused_imports","explanation":null},"level":"error","spans":[{"file_name":"src/schema.rs","byte_start":41,"byte_end":50,"line_start":1,"line_end":1,"column_start":42,"column_end":51,"is_primary":true,"text":[{"text":"use crate::model::{Subsystem, TxSuccess, RxReading, CalibrateThermometer};","highlight_start":42,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":8,"byte_end":16,"line_start":1,"line_end":1,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"#![deny(warnings)]","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`#[deny(unused_imports)]` implied by `#[deny(warnings)]`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/schema.rs","byte_start":39,"byte_end":50,"line_start":1,"line_end":1,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"use crate::model::{Subsystem, TxSuccess, RxReading, CalibrateThermometer};","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unused import: `RxReading`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/schema.rs:1:42\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::model::{Subsystem, TxSuccess, RxReading, CalibrateThermometer};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#![deny(warnings)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[deny(unused_imports)]` implied by `#[deny(warnings)]`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/model.rs","byte_start":2305,"byte_end":2308,"line_start":82,"line_end":82,"column_start":32,"column_end":35,"is_primary":true,"text":[{"text":"            Err(err) => return err,","highlight_start":32,"highlight_end":35}],"label":"expected enum `Result`, found struct `std::io::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Result<std::string::String, std::io::Error>`\n found struct `std::io::Error`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try wrapping the expression in `Err`","code":null,"level":"help","spans":[{"file_name":"src/model.rs","byte_start":2305,"byte_end":2305,"line_start":82,"line_end":82,"column_start":32,"column_end":32,"is_primary":true,"text":[{"text":"            Err(err) => return err,","highlight_start":32,"highlight_end":32}],"label":null,"suggested_replacement":"Err(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/model.rs","byte_start":2308,"byte_end":2308,"line_start":82,"line_end":82,"column_start":35,"column_end":35,"is_primary":true,"text":[{"text":"            Err(err) => return err,","highlight_start":35,"highlight_end":35}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/model.rs:82:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Err(err) => return err,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `Result`, found struct `std::io::Error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `\u001b[0m\u001b[0m\u001b[1mResult<std::string::String\u001b[0m\u001b[0m, std::io::Error\u001b[0m\u001b[0m\u001b[1m>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found struct `std::io::Error`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try wrapping the expression in `Err`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Err(err) => return \u001b[0m\u001b[0m\u001b[38;5;10mErr(\u001b[0m\u001b[0merr\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"message":"cannot add `std::string::String` to `&str`","code":{"code":"E0369","explanation":"A binary operation was attempted on a type which doesn't support it.\n\nErroneous code example:\n\n```compile_fail,E0369\nlet x = 12f32; // error: binary operation `<<` cannot be applied to\n               //        type `f32`\n\nx << 2;\n```\n\nTo fix this error, please check that this type implements this binary\noperation. Example:\n\n```\nlet x = 12u32; // the `u32` type does implement it:\n               // https://doc.rust-lang.org/stable/std/ops/trait.Shl.html\n\nx << 2; // ok!\n```\n\nIt is also possible to overload most operators for your own type by\nimplementing traits from `std::ops`.\n\nString concatenation appends the string on the right to the string on the\nleft and may require reallocation. This requires ownership of the string\non the left. If something should be added to a string literal, move the\nliteral to the heap by allocating it with `to_owned()` like in\n`\"Your text\".to_owned()`.\n"},"level":"error","spans":[{"file_name":"src/model.rs","byte_start":2824,"byte_end":2832,"line_start":106,"line_end":106,"column_start":23,"column_end":31,"is_primary":false,"text":[{"text":"        let command = \"power:\" + _power.to_string();","highlight_start":23,"highlight_end":31}],"label":"&str","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/model.rs","byte_start":2835,"byte_end":2853,"line_start":106,"line_end":106,"column_start":34,"column_end":52,"is_primary":false,"text":[{"text":"        let command = \"power:\" + _power.to_string();","highlight_start":34,"highlight_end":52}],"label":"std::string::String","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/model.rs","byte_start":2833,"byte_end":2834,"line_start":106,"line_end":106,"column_start":32,"column_end":33,"is_primary":true,"text":[{"text":"        let command = \"power:\" + _power.to_string();","highlight_start":32,"highlight_end":33}],"label":"`+` cannot be used to concatenate a `&str` with a `String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left","code":null,"level":"help","spans":[{"file_name":"src/model.rs","byte_start":2824,"byte_end":2832,"line_start":106,"line_end":106,"column_start":23,"column_end":31,"is_primary":true,"text":[{"text":"        let command = \"power:\" + _power.to_string();","highlight_start":23,"highlight_end":31}],"label":null,"suggested_replacement":"\"power:\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/model.rs","byte_start":2835,"byte_end":2853,"line_start":106,"line_end":106,"column_start":34,"column_end":52,"is_primary":true,"text":[{"text":"        let command = \"power:\" + _power.to_string();","highlight_start":34,"highlight_end":52}],"label":null,"suggested_replacement":"&_power.to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0369]\u001b[0m\u001b[0m\u001b[1m: cannot add `std::string::String` to `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/model.rs:106:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let command = \"power:\" + _power.to_string();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mstd::string::String\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`+` cannot be used to concatenate a `&str` with a `String`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m&str\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let command = \u001b[0m\u001b[0m\u001b[38;5;10m\"power:\".to_owned()\u001b[0m\u001b[0m + \u001b[0m\u001b[0m\u001b[38;5;10m&_power.to_string()\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/model.rs","byte_start":3105,"byte_end":3123,"line_start":116,"line_end":116,"column_start":34,"column_end":52,"is_primary":true,"text":[{"text":"    pub fn temperature(&self) -> Result<i32, Error> {","highlight_start":34,"highlight_end":52}],"label":"expected enum `Result`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/model.rs","byte_start":3083,"byte_end":3094,"line_start":116,"line_end":116,"column_start":12,"column_end":23,"is_primary":false,"text":[{"text":"    pub fn temperature(&self) -> Result<i32, Error> {","highlight_start":12,"highlight_end":23}],"label":"implicitly returns `()` as its body has no tail or `return` expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"  expected enum `Result<i32, std::io::Error>`\nfound unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider removing this semicolon","code":null,"level":"help","spans":[{"file_name":"src/model.rs","byte_start":3302,"byte_end":3303,"line_start":122,"line_end":122,"column_start":47,"column_end":48,"is_primary":true,"text":[{"text":"        Ok(result.data.parse::<u8>().unwrap());","highlight_start":47,"highlight_end":48}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/model.rs:116:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn temperature(&self) -> Result<i32, Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `Result`, found `()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mimplicitly returns `()` as its body has no tail or `return` expression\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Ok(result.data.parse::<u8>().unwrap());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: consider removing this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:   expected enum `\u001b[0m\u001b[0m\u001b[1mResult<i32, std::io::Error>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found unit type `\u001b[0m\u001b[0m\u001b[1m()\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"field `success` of struct `CalibrateThermometer` is private","code":{"code":"E0616","explanation":"Attempted to access a private field on a struct.\n\nErroneous code example:\n\n```compile_fail,E0616\nmod some_module {\n    pub struct Foo {\n        x: u32, // So `x` is private in here.\n    }\n\n    impl Foo {\n        pub fn new() -> Foo { Foo { x: 0 } }\n    }\n}\n\nlet f = some_module::Foo::new();\nprintln!(\"{}\", f.x); // error: field `x` of struct `some_module::Foo` is private\n```\n\nIf you want to access this field, you have two options:\n\n1) Set the field public:\n\n```\nmod some_module {\n    pub struct Foo {\n        pub x: u32, // `x` is now public.\n    }\n\n    impl Foo {\n        pub fn new() -> Foo { Foo { x: 0 } }\n    }\n}\n\nlet f = some_module::Foo::new();\nprintln!(\"{}\", f.x); // ok!\n```\n\n2) Add a getter function:\n\n```\nmod some_module {\n    pub struct Foo {\n        x: u32, // So `x` is still private in here.\n    }\n\n    impl Foo {\n        pub fn new() -> Foo { Foo { x: 0 } }\n\n        // We create the getter function here:\n        pub fn get_x(&self) -> &u32 { &self.x }\n    }\n}\n\nlet f = some_module::Foo::new();\nprintln!(\"{}\", f.get_x()); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/schema.rs","byte_start":1217,"byte_end":1224,"line_start":49,"line_end":49,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"        Ok(self.success)","highlight_start":17,"highlight_end":24}],"label":"private field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0616]\u001b[0m\u001b[0m\u001b[1m: field `success` of struct `CalibrateThermometer` is private\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/schema.rs:49:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Ok(self.success)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mprivate field\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/object.rs","byte_start":12793,"byte_end":13499,"line_start":406,"line_end":419,"column_start":54,"column_end":33,"is_primary":true,"text":[{"text":"                            let result: $return_ty = (|| {","highlight_start":54,"highlight_end":59},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    let $arg_name: $arg_ty = args.get(&$crate::to_camel_case(stringify!($arg_name)))","highlight_start":1,"highlight_end":117},{"text":"                                        .expect(concat!(","highlight_start":1,"highlight_end":57},{"text":"                                            \"Argument \",","highlight_start":1,"highlight_end":57},{"text":"                                            stringify!($arg_name),","highlight_start":1,"highlight_end":67},{"text":"                                            \" missing - validation must have failed\"","highlight_start":1,"highlight_end":85},{"text":"                                        ));","highlight_start":1,"highlight_end":44},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    let $executor = &executor;","highlight_start":1,"highlight_end":63},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                $body","highlight_start":1,"highlight_end":38},{"text":"                            })();","highlight_start":1,"highlight_end":33}],"label":"expected struct `TxSuccess`, found enum `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/common.rs","byte_start":8610,"byte_end":8743,"line_start":324,"line_end":328,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::$success_callback!(","highlight_start":9,"highlight_end":36},{"text":"            @generate,","highlight_start":1,"highlight_end":23},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/common.rs","byte_start":15306,"byte_end":16046,"line_start":515,"line_end":535,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":9,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_description = $arg_desc,)*","highlight_start":1,"highlight_end":57},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(decs = $desc,)*","highlight_start":1,"highlight_end":34},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/common.rs","byte_start":15306,"byte_end":16046,"line_start":515,"line_end":535,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":9,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_description = $arg_desc,)*","highlight_start":1,"highlight_end":57},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(decs = $desc,)*","highlight_start":1,"highlight_end":34},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/object.rs","byte_start":16217,"byte_end":16534,"line_start":504,"line_end":513,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":9,"highlight_end":45},{"text":"            success_callback = graphql_object,","highlight_start":1,"highlight_end":47},{"text":"            additional_parser = {","highlight_start":1,"highlight_end":34},{"text":"                callback = graphql_object,","highlight_start":1,"highlight_end":43},{"text":"                header = {@parse_interfaces,},","highlight_start":1,"highlight_end":47},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [],","highlight_start":1,"highlight_end":24},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/common.rs","byte_start":4424,"byte_end":4764,"line_start":168,"line_end":179,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::$callback!(","highlight_start":9,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [],","highlight_start":1,"highlight_end":32},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {$outname},","highlight_start":1,"highlight_end":38},{"text":"                scalar = {<DefaultScalarValue>},","highlight_start":1,"highlight_end":49},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/object.rs","byte_start":16688,"byte_end":16805,"line_start":523,"line_end":526,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__juniper_parse_object_header!(","highlight_start":9,"highlight_end":48},{"text":"            callback = graphql_object,","highlight_start":1,"highlight_end":39},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/schema.rs","byte_start":1908,"byte_end":2613,"line_start":77,"line_end":100,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"graphql_object!(MutationRoot : Context as \"Mutation\" |&self| {","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Mutation commands","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    field set_power(&executor, power : bool) -> FieldResult<SetPower> ","highlight_start":1,"highlight_end":71},{"text":"        as \"Set subsystem power state\"","highlight_start":1,"highlight_end":39},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        // .set_power from the model","highlight_start":1,"highlight_end":37},{"text":"        Ok(executor.context().subsystem().set_power(power)?)","highlight_start":1,"highlight_end":61},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    field calibrate_thermometer(&executor) -> FieldResult<CalibrateThermometer>","highlight_start":1,"highlight_end":80},{"text":"        as \"Calibrate subsystem thermometer\"","highlight_start":1,"highlight_end":45},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        Ok(executor.context().subsystem().calibrate_thermometer()?)","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    field commandRaw(&executor, data : String) -> FieldResult<TxSuccess>","highlight_start":1,"highlight_end":73},{"text":"        as \"Send raw command to subsystem\"","highlight_start":1,"highlight_end":43},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        Ok(executor.context().subsystem().uart_tx(data))","highlight_start":1,"highlight_end":57},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"});","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"graphql_object!","def_site_span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/object.rs","byte_start":8678,"byte_end":16815,"line_start":314,"line_end":529,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! graphql_object {","highlight_start":1,"highlight_end":30},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @generate,","highlight_start":1,"highlight_end":19},{"text":"        meta = {","highlight_start":1,"highlight_end":17},{"text":"            lifetimes = [$($lifetimes:tt,)*],","highlight_start":1,"highlight_end":46},{"text":"            name = $name: ty,","highlight_start":1,"highlight_end":30},{"text":"            ctx = $ctx: ty,","highlight_start":1,"highlight_end":28},{"text":"            main_self = $main_self: ident,","highlight_start":1,"highlight_end":43},{"text":"            outname = {$($outname: tt)*},","highlight_start":1,"highlight_end":42},{"text":"            scalar = {$($scalar:tt)*},","highlight_start":1,"highlight_end":39},{"text":"            $(description = $desciption: expr,)*","highlight_start":1,"highlight_end":49},{"text":"            $(additional = {","highlight_start":1,"highlight_end":29},{"text":"                $(interfaces = [$($interface:ty,)*],)*","highlight_start":1,"highlight_end":55},{"text":"            },)*","highlight_start":1,"highlight_end":17},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        items = [$({","highlight_start":1,"highlight_end":21},{"text":"            name = $fn_name: ident,","highlight_start":1,"highlight_end":36},{"text":"            body = $body: block,","highlight_start":1,"highlight_end":33},{"text":"            return_ty = $return_ty: ty,","highlight_start":1,"highlight_end":40},{"text":"            args = [$({","highlight_start":1,"highlight_end":24},{"text":"                arg_name = $arg_name : ident,","highlight_start":1,"highlight_end":46},{"text":"                arg_ty = $arg_ty: ty,","highlight_start":1,"highlight_end":38},{"text":"                $(arg_default = $arg_default: expr,)*","highlight_start":1,"highlight_end":54},{"text":"                $(arg_description = $arg_description: expr,)*","highlight_start":1,"highlight_end":62},{"text":"                $(arg_docstring = $arg_docstring: expr,)*","highlight_start":1,"highlight_end":58},{"text":"            },)*],","highlight_start":1,"highlight_end":19},{"text":"            $(decs = $fn_description: expr,)*","highlight_start":1,"highlight_end":46},{"text":"            $(docstring = $docstring: expr,)*","highlight_start":1,"highlight_end":46},{"text":"            $(deprecated = $deprecated: expr,)*","highlight_start":1,"highlight_end":48},{"text":"            $(executor_var = $executor: ident,)*","highlight_start":1,"highlight_end":49},{"text":"        },)*],","highlight_start":1,"highlight_end":15},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_impl_trait!(","highlight_start":1,"highlight_end":39},{"text":"            impl<$($scalar)* $(, $lifetimes)* > GraphQLType for $name {","highlight_start":1,"highlight_end":72},{"text":"                type Context = $ctx;","highlight_start":1,"highlight_end":37},{"text":"                type TypeInfo = ();","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn name(_ : &Self::TypeInfo) -> Option<&str> {","highlight_start":1,"highlight_end":63},{"text":"                    Some($($outname)*)","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn meta<'r>(","highlight_start":1,"highlight_end":29},{"text":"                    info: &Self::TypeInfo,","highlight_start":1,"highlight_end":43},{"text":"                    registry: &mut $crate::Registry<'r, $crate::__juniper_insert_generic!($($scalar)+)>","highlight_start":1,"highlight_end":104},{"text":"                ) -> $crate::meta::MetaType<'r, $crate::__juniper_insert_generic!($($scalar)+)>","highlight_start":1,"highlight_end":96},{"text":"                where for<'__b> &'__b $crate::__juniper_insert_generic!($($scalar)+): $crate::ScalarRefValue<'__b>,","highlight_start":1,"highlight_end":116},{"text":"                    $crate::__juniper_insert_generic!($($scalar)+): 'r","highlight_start":1,"highlight_end":71},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    let fields = &[$(","highlight_start":1,"highlight_end":38},{"text":"                        registry.field_convert::<$return_ty, _, Self::Context>(","highlight_start":1,"highlight_end":80},{"text":"                            &$crate::to_camel_case(stringify!($fn_name)),","highlight_start":1,"highlight_end":74},{"text":"                            info","highlight_start":1,"highlight_end":33},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                            $(.description($fn_description))*","highlight_start":1,"highlight_end":62},{"text":"                            .push_docstring(&[$($docstring,)*])","highlight_start":1,"highlight_end":64},{"text":"                            $(.deprecated($deprecated))*","highlight_start":1,"highlight_end":57},{"text":"                            $(.argument(","highlight_start":1,"highlight_end":41},{"text":"                                $crate::__juniper_create_arg!(","highlight_start":1,"highlight_end":63},{"text":"                                    registry = registry,","highlight_start":1,"highlight_end":57},{"text":"                                    info = info,","highlight_start":1,"highlight_end":49},{"text":"                                    arg_ty = $arg_ty,","highlight_start":1,"highlight_end":54},{"text":"                                    arg_name = $arg_name,","highlight_start":1,"highlight_end":58},{"text":"                                    $(default = $arg_default,)*","highlight_start":1,"highlight_end":64},{"text":"                                    $(description = $arg_description,)*","highlight_start":1,"highlight_end":72},{"text":"                                    $(docstring = $arg_docstring,)*","highlight_start":1,"highlight_end":68},{"text":"                                )","highlight_start":1,"highlight_end":34},{"text":"                            ))*,","highlight_start":1,"highlight_end":33},{"text":"                    )*];","highlight_start":1,"highlight_end":25},{"text":"                    registry.build_object_type::<$name>(","highlight_start":1,"highlight_end":57},{"text":"                        info, fields","highlight_start":1,"highlight_end":37},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                        $(.description($desciption))*","highlight_start":1,"highlight_end":54},{"text":"                        $($(.interfaces(&[","highlight_start":1,"highlight_end":43},{"text":"                           $(registry.get_type::<$interface>(&()),)*","highlight_start":1,"highlight_end":69},{"text":"                        ]))*)*","highlight_start":1,"highlight_end":31},{"text":"                        .into_meta()","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn concrete_type_name(&self, _: &Self::Context, _: &Self::TypeInfo) -> String {","highlight_start":1,"highlight_end":96},{"text":"                    $($outname)*.to_owned()","highlight_start":1,"highlight_end":44},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[allow(unused_variables)]","highlight_start":1,"highlight_end":43},{"text":"                fn resolve_field(","highlight_start":1,"highlight_end":34},{"text":"                    &$main_self,","highlight_start":1,"highlight_end":33},{"text":"                    info: &Self::TypeInfo,","highlight_start":1,"highlight_end":43},{"text":"                    field: &str,","highlight_start":1,"highlight_end":33},{"text":"                    args: &$crate::Arguments<$crate::__juniper_insert_generic!($($scalar)+)>,","highlight_start":1,"highlight_end":94},{"text":"                    executor: &$crate::Executor<Self::Context, $crate::__juniper_insert_generic!($($scalar)+)>","highlight_start":1,"highlight_end":111},{"text":"                ) -> $crate::ExecutionResult<$crate::__juniper_insert_generic!($($scalar)+)> {","highlight_start":1,"highlight_end":95},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        if field == &$crate::to_camel_case(stringify!($fn_name)) {","highlight_start":1,"highlight_end":83},{"text":"                            let result: $return_ty = (|| {","highlight_start":1,"highlight_end":59},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    let $arg_name: $arg_ty = args.get(&$crate::to_camel_case(stringify!($arg_name)))","highlight_start":1,"highlight_end":117},{"text":"                                        .expect(concat!(","highlight_start":1,"highlight_end":57},{"text":"                                            \"Argument \",","highlight_start":1,"highlight_end":57},{"text":"                                            stringify!($arg_name),","highlight_start":1,"highlight_end":67},{"text":"                                            \" missing - validation must have failed\"","highlight_start":1,"highlight_end":85},{"text":"                                        ));","highlight_start":1,"highlight_end":44},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    let $executor = &executor;","highlight_start":1,"highlight_end":63},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                $body","highlight_start":1,"highlight_end":38},{"text":"                            })();","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            return $crate::IntoResolvable::into(result, executor.context())","highlight_start":1,"highlight_end":92},{"text":"                                .and_then(|res| {","highlight_start":1,"highlight_end":50},{"text":"                                    match res {","highlight_start":1,"highlight_end":48},{"text":"                                        Some((ctx, r)) => {","highlight_start":1,"highlight_end":60},{"text":"                                            executor.replaced_context(ctx)","highlight_start":1,"highlight_end":75},{"text":"                                                .resolve_with_ctx(&(), &r)","highlight_start":1,"highlight_end":75},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        None => Ok($crate::Value::null())","highlight_start":1,"highlight_end":74},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    panic!(\"Field {} not found on type {}\", field, $($outname)*);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @parse_interfaces,","highlight_start":1,"highlight_end":27},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {","highlight_start":1,"highlight_end":17},{"text":"            lifetimes = [$($lifetime:tt,)*],","highlight_start":1,"highlight_end":45},{"text":"            name = $name:ty,","highlight_start":1,"highlight_end":29},{"text":"            ctx = $ctxt: ty,","highlight_start":1,"highlight_end":29},{"text":"            main_self = $mainself: ident,","highlight_start":1,"highlight_end":42},{"text":"            outname = {$($outname:tt)*},","highlight_start":1,"highlight_end":41},{"text":"            scalar = {$($scalar:tt)*},","highlight_start":1,"highlight_end":39},{"text":"            $(description = $desciption: tt,)*","highlight_start":1,"highlight_end":47},{"text":"            $(additional = {","highlight_start":1,"highlight_end":29},{"text":"                $(interfaces = [$($_interface:ty,)*],)*","highlight_start":1,"highlight_end":56},{"text":"            },)*","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = [$($interface: ty),+]  $($rest:tt)*","highlight_start":1,"highlight_end":51},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [$($lifetime,)*],","highlight_start":1,"highlight_end":46},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                ctx = $ctxt,","highlight_start":1,"highlight_end":29},{"text":"                main_self = $mainself,","highlight_start":1,"highlight_end":39},{"text":"                outname = {$($outname)*},","highlight_start":1,"highlight_end":42},{"text":"                scalar = {$($scalar)*},","highlight_start":1,"highlight_end":40},{"text":"                $(description = $desciption,)*","highlight_start":1,"highlight_end":47},{"text":"                additional = {","highlight_start":1,"highlight_end":31},{"text":"                        interfaces = [$($interface,)*],","highlight_start":1,"highlight_end":56},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @parse_interfaces,","highlight_start":1,"highlight_end":27},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = { $($meta:tt)* },","highlight_start":1,"highlight_end":33},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = interfaces: $($rest:tt)*","highlight_start":1,"highlight_end":40},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::graphql_object!(","highlight_start":1,"highlight_end":33},{"text":"            @parse_interfaces,","highlight_start":1,"highlight_end":31},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = { $($meta)* },","highlight_start":1,"highlight_end":34},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @parse,","highlight_start":1,"highlight_end":16},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        rest = $($rest:tt)*","highlight_start":1,"highlight_end":28},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = graphql_object,","highlight_start":1,"highlight_end":47},{"text":"            additional_parser = {","highlight_start":1,"highlight_end":34},{"text":"                callback = graphql_object,","highlight_start":1,"highlight_end":43},{"text":"                header = {@parse_interfaces,},","highlight_start":1,"highlight_end":47},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [],","highlight_start":1,"highlight_end":24},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@$($stuff:tt)*) => {","highlight_start":1,"highlight_end":26},{"text":"        compile_error!(\"Invalid syntax for `graphql_object!`\");","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_object_header!(","highlight_start":1,"highlight_end":48},{"text":"            callback = graphql_object,","highlight_start":1,"highlight_end":39},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__juniper_parse_object_header!","def_site_span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/common.rs","byte_start":1275,"byte_end":8320,"line_start":56,"line_end":312,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __juniper_parse_object_header {","highlight_start":1,"highlight_end":45},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback:ident,","highlight_start":1,"highlight_end":36},{"text":"        rest = <$($lifetime:tt),*> $name: ty $(: $ctxt: ty)* as $outname: tt","highlight_start":1,"highlight_end":77},{"text":"        where Scalar = <$generic:tt $(: $bound:tt)*> $(| &$mainself:ident |)* {","highlight_start":1,"highlight_end":80},{"text":"            $($items: tt)*","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [$($lifetime,)*],","highlight_start":1,"highlight_end":46},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {$outname},","highlight_start":1,"highlight_end":38},{"text":"                scalar = {<$generic $(: $bound)*>},","highlight_start":1,"highlight_end":52},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback:ident,","highlight_start":1,"highlight_end":36},{"text":"        rest = <$($lifetime:tt),*> $name: ty $(: $ctxt: ty)* as $outname: tt","highlight_start":1,"highlight_end":77},{"text":"        where Scalar = $scalar: ty $(| &$mainself:ident |)* {","highlight_start":1,"highlight_end":62},{"text":"            $($items: tt)*","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [$($lifetime,)*],","highlight_start":1,"highlight_end":46},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {$outname},","highlight_start":1,"highlight_end":38},{"text":"                scalar = {$scalar},","highlight_start":1,"highlight_end":36},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback: ident,","highlight_start":1,"highlight_end":37},{"text":"        rest = <$($lifetime:tt),*> $name: ty $(: $ctxt: ty)* as $outname: tt $(| &$mainself:ident |)* {","highlight_start":1,"highlight_end":104},{"text":"            $($items: tt)*","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [$($lifetime,)*],","highlight_start":1,"highlight_end":46},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {$outname},","highlight_start":1,"highlight_end":38},{"text":"                scalar = {<DefaultScalarValue>},","highlight_start":1,"highlight_end":49},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback: ident,","highlight_start":1,"highlight_end":37},{"text":"        rest = $name: ty $(: $ctxt: ty)* as $outname: tt","highlight_start":1,"highlight_end":57},{"text":"        where Scalar = <$generic:tt $(: $bound:tt)*> $(| &$mainself:ident |)* {","highlight_start":1,"highlight_end":80},{"text":"            $($items: tt)*","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [],","highlight_start":1,"highlight_end":32},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {$outname},","highlight_start":1,"highlight_end":38},{"text":"                scalar = {<$generic $(:$bound)*>},","highlight_start":1,"highlight_end":51},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback: ident,","highlight_start":1,"highlight_end":37},{"text":"        rest = $name: ty $(: $ctxt: ty)* as $outname: tt","highlight_start":1,"highlight_end":57},{"text":"        where Scalar = $scalar: ty $(| &$mainself:ident |)* {","highlight_start":1,"highlight_end":62},{"text":"            $($items: tt)*","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [],","highlight_start":1,"highlight_end":32},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {$outname},","highlight_start":1,"highlight_end":38},{"text":"                scalar = {$scalar},","highlight_start":1,"highlight_end":36},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback: ident,","highlight_start":1,"highlight_end":37},{"text":"        rest = $name: ty $(: $ctxt: ty)* as $outname: tt $(| &$mainself:ident |)* {","highlight_start":1,"highlight_end":84},{"text":"            $($items: tt)*","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [],","highlight_start":1,"highlight_end":32},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {$outname},","highlight_start":1,"highlight_end":38},{"text":"                scalar = {<DefaultScalarValue>},","highlight_start":1,"highlight_end":49},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback: ident,","highlight_start":1,"highlight_end":37},{"text":"        rest = <$($lifetime:tt),*> $name: ty $(: $ctxt: ty)*","highlight_start":1,"highlight_end":61},{"text":"        where Scalar = <$generic:tt $(: $bound:tt)*> $(| &$mainself:ident |)* {","highlight_start":1,"highlight_end":80},{"text":"            $($items: tt)*","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [$($lifetime,)*],","highlight_start":1,"highlight_end":46},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {stringify!($name)},","highlight_start":1,"highlight_end":47},{"text":"                scalar = {<$generic $(:$bounds)*>},","highlight_start":1,"highlight_end":52},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback: ident,","highlight_start":1,"highlight_end":37},{"text":"        rest = <$($lifetime:tt),*> $name: ty $(: $ctxt: ty)*","highlight_start":1,"highlight_end":61},{"text":"        where Scalar = $scalar: ty $(| &$mainself:ident |)* {","highlight_start":1,"highlight_end":62},{"text":"            $($items: tt)*","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [$($lifetime,)*],","highlight_start":1,"highlight_end":46},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {stringify!($name)},","highlight_start":1,"highlight_end":47},{"text":"                scalar = {$scalar},","highlight_start":1,"highlight_end":36},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback: ident,","highlight_start":1,"highlight_end":37},{"text":"        rest = <$($lifetime:tt),*> $name: ty $(: $ctxt: ty)* $(| &$mainself:ident |)* {","highlight_start":1,"highlight_end":88},{"text":"            $($items: tt)*","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [$($lifetime,)*],","highlight_start":1,"highlight_end":46},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {stringify!($name)},","highlight_start":1,"highlight_end":47},{"text":"                scalar = {<DefaultScalarValue>},","highlight_start":1,"highlight_end":49},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback: ident,","highlight_start":1,"highlight_end":37},{"text":"        rest = $name: ty $(: $ctxt: ty)*","highlight_start":1,"highlight_end":41},{"text":"        where Scalar = <$generic:tt $(: $bound:tt)*> $(| &$mainself:ident |)*","highlight_start":1,"highlight_end":78},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $($items: tt)*","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [],","highlight_start":1,"highlight_end":32},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {stringify!($name)},","highlight_start":1,"highlight_end":47},{"text":"                scalar = {<$generic $(: $bound)*>},","highlight_start":1,"highlight_end":52},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback: ident,","highlight_start":1,"highlight_end":37},{"text":"        rest = $name: ty $(: $ctxt: ty)* where Scalar = $scalar: ty $(| &$mainself:ident |)* {","highlight_start":1,"highlight_end":95},{"text":"            $($items: tt)*","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [],","highlight_start":1,"highlight_end":32},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {stringify!($name)},","highlight_start":1,"highlight_end":47},{"text":"                scalar = {$scalar},","highlight_start":1,"highlight_end":36},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback: ident,","highlight_start":1,"highlight_end":37},{"text":"        rest = $name: ty $(: $ctxt: ty)* $(| &$mainself:ident |)* {","highlight_start":1,"highlight_end":68},{"text":"            $($items: tt)*","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            @parse,","highlight_start":1,"highlight_end":20},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [],","highlight_start":1,"highlight_end":32},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                outname = {stringify!($name)},","highlight_start":1,"highlight_end":47},{"text":"                scalar = {<DefaultScalarValue>},","highlight_start":1,"highlight_end":49},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            rest = $($items)*","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        callback = $callback: ident,","highlight_start":1,"highlight_end":37},{"text":"        rest = $($rest:tt)*","highlight_start":1,"highlight_end":28},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        compile_error!(\"Invalid syntax\");","highlight_start":1,"highlight_end":42},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::graphql_object!","def_site_span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/object.rs","byte_start":8678,"byte_end":16815,"line_start":314,"line_end":529,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! graphql_object {","highlight_start":1,"highlight_end":30},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @generate,","highlight_start":1,"highlight_end":19},{"text":"        meta = {","highlight_start":1,"highlight_end":17},{"text":"            lifetimes = [$($lifetimes:tt,)*],","highlight_start":1,"highlight_end":46},{"text":"            name = $name: ty,","highlight_start":1,"highlight_end":30},{"text":"            ctx = $ctx: ty,","highlight_start":1,"highlight_end":28},{"text":"            main_self = $main_self: ident,","highlight_start":1,"highlight_end":43},{"text":"            outname = {$($outname: tt)*},","highlight_start":1,"highlight_end":42},{"text":"            scalar = {$($scalar:tt)*},","highlight_start":1,"highlight_end":39},{"text":"            $(description = $desciption: expr,)*","highlight_start":1,"highlight_end":49},{"text":"            $(additional = {","highlight_start":1,"highlight_end":29},{"text":"                $(interfaces = [$($interface:ty,)*],)*","highlight_start":1,"highlight_end":55},{"text":"            },)*","highlight_start":1,"highlight_end":17},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        items = [$({","highlight_start":1,"highlight_end":21},{"text":"            name = $fn_name: ident,","highlight_start":1,"highlight_end":36},{"text":"            body = $body: block,","highlight_start":1,"highlight_end":33},{"text":"            return_ty = $return_ty: ty,","highlight_start":1,"highlight_end":40},{"text":"            args = [$({","highlight_start":1,"highlight_end":24},{"text":"                arg_name = $arg_name : ident,","highlight_start":1,"highlight_end":46},{"text":"                arg_ty = $arg_ty: ty,","highlight_start":1,"highlight_end":38},{"text":"                $(arg_default = $arg_default: expr,)*","highlight_start":1,"highlight_end":54},{"text":"                $(arg_description = $arg_description: expr,)*","highlight_start":1,"highlight_end":62},{"text":"                $(arg_docstring = $arg_docstring: expr,)*","highlight_start":1,"highlight_end":58},{"text":"            },)*],","highlight_start":1,"highlight_end":19},{"text":"            $(decs = $fn_description: expr,)*","highlight_start":1,"highlight_end":46},{"text":"            $(docstring = $docstring: expr,)*","highlight_start":1,"highlight_end":46},{"text":"            $(deprecated = $deprecated: expr,)*","highlight_start":1,"highlight_end":48},{"text":"            $(executor_var = $executor: ident,)*","highlight_start":1,"highlight_end":49},{"text":"        },)*],","highlight_start":1,"highlight_end":15},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_impl_trait!(","highlight_start":1,"highlight_end":39},{"text":"            impl<$($scalar)* $(, $lifetimes)* > GraphQLType for $name {","highlight_start":1,"highlight_end":72},{"text":"                type Context = $ctx;","highlight_start":1,"highlight_end":37},{"text":"                type TypeInfo = ();","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn name(_ : &Self::TypeInfo) -> Option<&str> {","highlight_start":1,"highlight_end":63},{"text":"                    Some($($outname)*)","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn meta<'r>(","highlight_start":1,"highlight_end":29},{"text":"                    info: &Self::TypeInfo,","highlight_start":1,"highlight_end":43},{"text":"                    registry: &mut $crate::Registry<'r, $crate::__juniper_insert_generic!($($scalar)+)>","highlight_start":1,"highlight_end":104},{"text":"                ) -> $crate::meta::MetaType<'r, $crate::__juniper_insert_generic!($($scalar)+)>","highlight_start":1,"highlight_end":96},{"text":"                where for<'__b> &'__b $crate::__juniper_insert_generic!($($scalar)+): $crate::ScalarRefValue<'__b>,","highlight_start":1,"highlight_end":116},{"text":"                    $crate::__juniper_insert_generic!($($scalar)+): 'r","highlight_start":1,"highlight_end":71},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    let fields = &[$(","highlight_start":1,"highlight_end":38},{"text":"                        registry.field_convert::<$return_ty, _, Self::Context>(","highlight_start":1,"highlight_end":80},{"text":"                            &$crate::to_camel_case(stringify!($fn_name)),","highlight_start":1,"highlight_end":74},{"text":"                            info","highlight_start":1,"highlight_end":33},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                            $(.description($fn_description))*","highlight_start":1,"highlight_end":62},{"text":"                            .push_docstring(&[$($docstring,)*])","highlight_start":1,"highlight_end":64},{"text":"                            $(.deprecated($deprecated))*","highlight_start":1,"highlight_end":57},{"text":"                            $(.argument(","highlight_start":1,"highlight_end":41},{"text":"                                $crate::__juniper_create_arg!(","highlight_start":1,"highlight_end":63},{"text":"                                    registry = registry,","highlight_start":1,"highlight_end":57},{"text":"                                    info = info,","highlight_start":1,"highlight_end":49},{"text":"                                    arg_ty = $arg_ty,","highlight_start":1,"highlight_end":54},{"text":"                                    arg_name = $arg_name,","highlight_start":1,"highlight_end":58},{"text":"                                    $(default = $arg_default,)*","highlight_start":1,"highlight_end":64},{"text":"                                    $(description = $arg_description,)*","highlight_start":1,"highlight_end":72},{"text":"                                    $(docstring = $arg_docstring,)*","highlight_start":1,"highlight_end":68},{"text":"                                )","highlight_start":1,"highlight_end":34},{"text":"                            ))*,","highlight_start":1,"highlight_end":33},{"text":"                    )*];","highlight_start":1,"highlight_end":25},{"text":"                    registry.build_object_type::<$name>(","highlight_start":1,"highlight_end":57},{"text":"                        info, fields","highlight_start":1,"highlight_end":37},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                        $(.description($desciption))*","highlight_start":1,"highlight_end":54},{"text":"                        $($(.interfaces(&[","highlight_start":1,"highlight_end":43},{"text":"                           $(registry.get_type::<$interface>(&()),)*","highlight_start":1,"highlight_end":69},{"text":"                        ]))*)*","highlight_start":1,"highlight_end":31},{"text":"                        .into_meta()","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn concrete_type_name(&self, _: &Self::Context, _: &Self::TypeInfo) -> String {","highlight_start":1,"highlight_end":96},{"text":"                    $($outname)*.to_owned()","highlight_start":1,"highlight_end":44},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[allow(unused_variables)]","highlight_start":1,"highlight_end":43},{"text":"                fn resolve_field(","highlight_start":1,"highlight_end":34},{"text":"                    &$main_self,","highlight_start":1,"highlight_end":33},{"text":"                    info: &Self::TypeInfo,","highlight_start":1,"highlight_end":43},{"text":"                    field: &str,","highlight_start":1,"highlight_end":33},{"text":"                    args: &$crate::Arguments<$crate::__juniper_insert_generic!($($scalar)+)>,","highlight_start":1,"highlight_end":94},{"text":"                    executor: &$crate::Executor<Self::Context, $crate::__juniper_insert_generic!($($scalar)+)>","highlight_start":1,"highlight_end":111},{"text":"                ) -> $crate::ExecutionResult<$crate::__juniper_insert_generic!($($scalar)+)> {","highlight_start":1,"highlight_end":95},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        if field == &$crate::to_camel_case(stringify!($fn_name)) {","highlight_start":1,"highlight_end":83},{"text":"                            let result: $return_ty = (|| {","highlight_start":1,"highlight_end":59},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    let $arg_name: $arg_ty = args.get(&$crate::to_camel_case(stringify!($arg_name)))","highlight_start":1,"highlight_end":117},{"text":"                                        .expect(concat!(","highlight_start":1,"highlight_end":57},{"text":"                                            \"Argument \",","highlight_start":1,"highlight_end":57},{"text":"                                            stringify!($arg_name),","highlight_start":1,"highlight_end":67},{"text":"                                            \" missing - validation must have failed\"","highlight_start":1,"highlight_end":85},{"text":"                                        ));","highlight_start":1,"highlight_end":44},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    let $executor = &executor;","highlight_start":1,"highlight_end":63},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                $body","highlight_start":1,"highlight_end":38},{"text":"                            })();","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            return $crate::IntoResolvable::into(result, executor.context())","highlight_start":1,"highlight_end":92},{"text":"                                .and_then(|res| {","highlight_start":1,"highlight_end":50},{"text":"                                    match res {","highlight_start":1,"highlight_end":48},{"text":"                                        Some((ctx, r)) => {","highlight_start":1,"highlight_end":60},{"text":"                                            executor.replaced_context(ctx)","highlight_start":1,"highlight_end":75},{"text":"                                                .resolve_with_ctx(&(), &r)","highlight_start":1,"highlight_end":75},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        None => Ok($crate::Value::null())","highlight_start":1,"highlight_end":74},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    panic!(\"Field {} not found on type {}\", field, $($outname)*);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @parse_interfaces,","highlight_start":1,"highlight_end":27},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {","highlight_start":1,"highlight_end":17},{"text":"            lifetimes = [$($lifetime:tt,)*],","highlight_start":1,"highlight_end":45},{"text":"            name = $name:ty,","highlight_start":1,"highlight_end":29},{"text":"            ctx = $ctxt: ty,","highlight_start":1,"highlight_end":29},{"text":"            main_self = $mainself: ident,","highlight_start":1,"highlight_end":42},{"text":"            outname = {$($outname:tt)*},","highlight_start":1,"highlight_end":41},{"text":"            scalar = {$($scalar:tt)*},","highlight_start":1,"highlight_end":39},{"text":"            $(description = $desciption: tt,)*","highlight_start":1,"highlight_end":47},{"text":"            $(additional = {","highlight_start":1,"highlight_end":29},{"text":"                $(interfaces = [$($_interface:ty,)*],)*","highlight_start":1,"highlight_end":56},{"text":"            },)*","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = [$($interface: ty),+]  $($rest:tt)*","highlight_start":1,"highlight_end":51},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [$($lifetime,)*],","highlight_start":1,"highlight_end":46},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                ctx = $ctxt,","highlight_start":1,"highlight_end":29},{"text":"                main_self = $mainself,","highlight_start":1,"highlight_end":39},{"text":"                outname = {$($outname)*},","highlight_start":1,"highlight_end":42},{"text":"                scalar = {$($scalar)*},","highlight_start":1,"highlight_end":40},{"text":"                $(description = $desciption,)*","highlight_start":1,"highlight_end":47},{"text":"                additional = {","highlight_start":1,"highlight_end":31},{"text":"                        interfaces = [$($interface,)*],","highlight_start":1,"highlight_end":56},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @parse_interfaces,","highlight_start":1,"highlight_end":27},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = { $($meta:tt)* },","highlight_start":1,"highlight_end":33},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = interfaces: $($rest:tt)*","highlight_start":1,"highlight_end":40},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::graphql_object!(","highlight_start":1,"highlight_end":33},{"text":"            @parse_interfaces,","highlight_start":1,"highlight_end":31},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = { $($meta)* },","highlight_start":1,"highlight_end":34},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @parse,","highlight_start":1,"highlight_end":16},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        rest = $($rest:tt)*","highlight_start":1,"highlight_end":28},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = graphql_object,","highlight_start":1,"highlight_end":47},{"text":"            additional_parser = {","highlight_start":1,"highlight_end":34},{"text":"                callback = graphql_object,","highlight_start":1,"highlight_end":43},{"text":"                header = {@parse_interfaces,},","highlight_start":1,"highlight_end":47},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [],","highlight_start":1,"highlight_end":24},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@$($stuff:tt)*) => {","highlight_start":1,"highlight_end":26},{"text":"        compile_error!(\"Invalid syntax for `graphql_object!`\");","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_object_header!(","highlight_start":1,"highlight_end":48},{"text":"            callback = graphql_object,","highlight_start":1,"highlight_end":39},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__juniper_parse_field_list!","def_site_span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/common.rs","byte_start":8353,"byte_end":16697,"line_start":316,"line_end":561,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __juniper_parse_field_list {","highlight_start":1,"highlight_end":42},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest =","highlight_start":1,"highlight_end":15},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$success_callback!(","highlight_start":1,"highlight_end":36},{"text":"            @generate,","highlight_start":1,"highlight_end":23},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = , $($rest: tt)*","highlight_start":1,"highlight_end":31},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @parse_description,","highlight_start":1,"highlight_end":28},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {","highlight_start":1,"highlight_end":17},{"text":"            $(lifetimes = [$($lifetime:tt,)*],)*","highlight_start":1,"highlight_end":49},{"text":"            $(name = $name:ty,)*","highlight_start":1,"highlight_end":33},{"text":"            $(ctx = $ctxt: ty,)*","highlight_start":1,"highlight_end":33},{"text":"            $(main_self = $mainself: ident,)*","highlight_start":1,"highlight_end":46},{"text":"            $(outname = {$($outname:tt)*},)*","highlight_start":1,"highlight_end":45},{"text":"            $(scalar = {$($scalar:tt)*},)*","highlight_start":1,"highlight_end":43},{"text":"            $(description = $_desciption: tt,)*","highlight_start":1,"highlight_end":48},{"text":"            $(additional = {$($other: tt)*},)*","highlight_start":1,"highlight_end":47},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = $desc: tt  $($rest:tt)*","highlight_start":1,"highlight_end":39},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                $(lifetimes = [$($lifetime,)*],)*","highlight_start":1,"highlight_end":50},{"text":"                $(name = $name,)*","highlight_start":1,"highlight_end":34},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                $(outname = {$($outname)*},)*","highlight_start":1,"highlight_end":46},{"text":"                $(scalar = {$($scalar)*},)*","highlight_start":1,"highlight_end":44},{"text":"                description = $desc,","highlight_start":1,"highlight_end":37},{"text":"                $(additional = {$($other)*},)*","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = { $($meta:tt)*},","highlight_start":1,"highlight_end":32},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = description:  $($rest:tt)*","highlight_start":1,"highlight_end":42},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            @parse_description,","highlight_start":1,"highlight_end":32},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = $(#[doc = $desc: tt])*","highlight_start":1,"highlight_end":38},{"text":"        #[deprecated $(( $(since = $since: tt,)* note = $reason: tt ))* ]","highlight_start":1,"highlight_end":74},{"text":"        field $name: ident (","highlight_start":1,"highlight_end":29},{"text":"            $(&$executor: tt)* $(,)*","highlight_start":1,"highlight_end":37},{"text":"            $($(#[doc = $arg_desc: expr])* $arg_name:ident $(= $arg_default: tt)* : $arg_ty: ty),* $(,)*","highlight_start":1,"highlight_end":105},{"text":"        ) -> $return_ty: ty $body: block","highlight_start":1,"highlight_end":41},{"text":"            $($rest:tt)*","highlight_start":1,"highlight_end":25},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_docstring = $arg_desc,)*","highlight_start":1,"highlight_end":55},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(docstring = $desc,)*","highlight_start":1,"highlight_end":39},{"text":"                deprecated = None$(.unwrap_or(Some($reason)))*,","highlight_start":1,"highlight_end":64},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = $(#[doc = $desc: tt])*","highlight_start":1,"highlight_end":38},{"text":"        field $name: ident (","highlight_start":1,"highlight_end":29},{"text":"            $(&$executor: ident)* $(,)*","highlight_start":1,"highlight_end":40},{"text":"            $($(#[doc = $arg_desc: expr])* $arg_name:ident $(= $arg_default: tt)* : $arg_ty: ty),* $(,)*","highlight_start":1,"highlight_end":105},{"text":"        ) -> $return_ty: ty $body: block","highlight_start":1,"highlight_end":41},{"text":"            $($rest:tt)*","highlight_start":1,"highlight_end":25},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_docstring = $arg_desc,)*","highlight_start":1,"highlight_end":55},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(docstring = $desc,)*","highlight_start":1,"highlight_end":39},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = field deprecated $reason:tt $name: ident (","highlight_start":1,"highlight_end":58},{"text":"            $(&$executor: tt)* $(,)*","highlight_start":1,"highlight_end":37},{"text":"            $($arg_name:ident $(= $arg_default: tt)* : $arg_ty: ty $(as $arg_desc: expr)*),* $(,)*","highlight_start":1,"highlight_end":99},{"text":"        ) -> $return_ty: ty $(as $desc: tt)* $body: block","highlight_start":1,"highlight_end":58},{"text":"            $($rest:tt)*","highlight_start":1,"highlight_end":25},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_description = $arg_desc,)*","highlight_start":1,"highlight_end":57},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(decs = $desc,)*","highlight_start":1,"highlight_end":34},{"text":"                deprecated = Some($reason),","highlight_start":1,"highlight_end":44},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = field $name: ident (","highlight_start":1,"highlight_end":36},{"text":"            $(&$executor: ident)* $(,)*","highlight_start":1,"highlight_end":40},{"text":"            $($arg_name:ident $(= $arg_default: tt)* : $arg_ty: ty $(as $arg_desc: expr)*),* $(,)*","highlight_start":1,"highlight_end":99},{"text":"        ) -> $return_ty: ty $(as $desc: tt)* $body: block","highlight_start":1,"highlight_end":58},{"text":"            $($rest:tt)*","highlight_start":1,"highlight_end":25},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_description = $arg_desc,)*","highlight_start":1,"highlight_end":57},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(decs = $desc,)*","highlight_start":1,"highlight_end":34},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {","highlight_start":1,"highlight_end":30},{"text":"            callback = $callback: ident,","highlight_start":1,"highlight_end":41},{"text":"            header = {$($header:tt)*},","highlight_start":1,"highlight_end":39},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = $($rest:tt)*","highlight_start":1,"highlight_end":28},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            $($header)*","highlight_start":1,"highlight_end":24},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {","highlight_start":1,"highlight_end":34},{"text":"                callback = $callback,","highlight_start":1,"highlight_end":38},{"text":"                header = {$($header)*},","highlight_start":1,"highlight_end":40},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__juniper_parse_field_list!","def_site_span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/common.rs","byte_start":8353,"byte_end":16697,"line_start":316,"line_end":561,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __juniper_parse_field_list {","highlight_start":1,"highlight_end":42},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest =","highlight_start":1,"highlight_end":15},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$success_callback!(","highlight_start":1,"highlight_end":36},{"text":"            @generate,","highlight_start":1,"highlight_end":23},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = , $($rest: tt)*","highlight_start":1,"highlight_end":31},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @parse_description,","highlight_start":1,"highlight_end":28},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {","highlight_start":1,"highlight_end":17},{"text":"            $(lifetimes = [$($lifetime:tt,)*],)*","highlight_start":1,"highlight_end":49},{"text":"            $(name = $name:ty,)*","highlight_start":1,"highlight_end":33},{"text":"            $(ctx = $ctxt: ty,)*","highlight_start":1,"highlight_end":33},{"text":"            $(main_self = $mainself: ident,)*","highlight_start":1,"highlight_end":46},{"text":"            $(outname = {$($outname:tt)*},)*","highlight_start":1,"highlight_end":45},{"text":"            $(scalar = {$($scalar:tt)*},)*","highlight_start":1,"highlight_end":43},{"text":"            $(description = $_desciption: tt,)*","highlight_start":1,"highlight_end":48},{"text":"            $(additional = {$($other: tt)*},)*","highlight_start":1,"highlight_end":47},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = $desc: tt  $($rest:tt)*","highlight_start":1,"highlight_end":39},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                $(lifetimes = [$($lifetime,)*],)*","highlight_start":1,"highlight_end":50},{"text":"                $(name = $name,)*","highlight_start":1,"highlight_end":34},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                $(outname = {$($outname)*},)*","highlight_start":1,"highlight_end":46},{"text":"                $(scalar = {$($scalar)*},)*","highlight_start":1,"highlight_end":44},{"text":"                description = $desc,","highlight_start":1,"highlight_end":37},{"text":"                $(additional = {$($other)*},)*","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = { $($meta:tt)*},","highlight_start":1,"highlight_end":32},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = description:  $($rest:tt)*","highlight_start":1,"highlight_end":42},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            @parse_description,","highlight_start":1,"highlight_end":32},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = $(#[doc = $desc: tt])*","highlight_start":1,"highlight_end":38},{"text":"        #[deprecated $(( $(since = $since: tt,)* note = $reason: tt ))* ]","highlight_start":1,"highlight_end":74},{"text":"        field $name: ident (","highlight_start":1,"highlight_end":29},{"text":"            $(&$executor: tt)* $(,)*","highlight_start":1,"highlight_end":37},{"text":"            $($(#[doc = $arg_desc: expr])* $arg_name:ident $(= $arg_default: tt)* : $arg_ty: ty),* $(,)*","highlight_start":1,"highlight_end":105},{"text":"        ) -> $return_ty: ty $body: block","highlight_start":1,"highlight_end":41},{"text":"            $($rest:tt)*","highlight_start":1,"highlight_end":25},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_docstring = $arg_desc,)*","highlight_start":1,"highlight_end":55},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(docstring = $desc,)*","highlight_start":1,"highlight_end":39},{"text":"                deprecated = None$(.unwrap_or(Some($reason)))*,","highlight_start":1,"highlight_end":64},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = $(#[doc = $desc: tt])*","highlight_start":1,"highlight_end":38},{"text":"        field $name: ident (","highlight_start":1,"highlight_end":29},{"text":"            $(&$executor: ident)* $(,)*","highlight_start":1,"highlight_end":40},{"text":"            $($(#[doc = $arg_desc: expr])* $arg_name:ident $(= $arg_default: tt)* : $arg_ty: ty),* $(,)*","highlight_start":1,"highlight_end":105},{"text":"        ) -> $return_ty: ty $body: block","highlight_start":1,"highlight_end":41},{"text":"            $($rest:tt)*","highlight_start":1,"highlight_end":25},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_docstring = $arg_desc,)*","highlight_start":1,"highlight_end":55},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(docstring = $desc,)*","highlight_start":1,"highlight_end":39},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = field deprecated $reason:tt $name: ident (","highlight_start":1,"highlight_end":58},{"text":"            $(&$executor: tt)* $(,)*","highlight_start":1,"highlight_end":37},{"text":"            $($arg_name:ident $(= $arg_default: tt)* : $arg_ty: ty $(as $arg_desc: expr)*),* $(,)*","highlight_start":1,"highlight_end":99},{"text":"        ) -> $return_ty: ty $(as $desc: tt)* $body: block","highlight_start":1,"highlight_end":58},{"text":"            $($rest:tt)*","highlight_start":1,"highlight_end":25},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_description = $arg_desc,)*","highlight_start":1,"highlight_end":57},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(decs = $desc,)*","highlight_start":1,"highlight_end":34},{"text":"                deprecated = Some($reason),","highlight_start":1,"highlight_end":44},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = field $name: ident (","highlight_start":1,"highlight_end":36},{"text":"            $(&$executor: ident)* $(,)*","highlight_start":1,"highlight_end":40},{"text":"            $($arg_name:ident $(= $arg_default: tt)* : $arg_ty: ty $(as $arg_desc: expr)*),* $(,)*","highlight_start":1,"highlight_end":99},{"text":"        ) -> $return_ty: ty $(as $desc: tt)* $body: block","highlight_start":1,"highlight_end":58},{"text":"            $($rest:tt)*","highlight_start":1,"highlight_end":25},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_description = $arg_desc,)*","highlight_start":1,"highlight_end":57},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(decs = $desc,)*","highlight_start":1,"highlight_end":34},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {","highlight_start":1,"highlight_end":30},{"text":"            callback = $callback: ident,","highlight_start":1,"highlight_end":41},{"text":"            header = {$($header:tt)*},","highlight_start":1,"highlight_end":39},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = $($rest:tt)*","highlight_start":1,"highlight_end":28},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            $($header)*","highlight_start":1,"highlight_end":24},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {","highlight_start":1,"highlight_end":34},{"text":"                callback = $callback,","highlight_start":1,"highlight_end":38},{"text":"                header = {$($header)*},","highlight_start":1,"highlight_end":40},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__juniper_parse_field_list!","def_site_span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/common.rs","byte_start":8353,"byte_end":16697,"line_start":316,"line_end":561,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __juniper_parse_field_list {","highlight_start":1,"highlight_end":42},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest =","highlight_start":1,"highlight_end":15},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$success_callback!(","highlight_start":1,"highlight_end":36},{"text":"            @generate,","highlight_start":1,"highlight_end":23},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = , $($rest: tt)*","highlight_start":1,"highlight_end":31},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @parse_description,","highlight_start":1,"highlight_end":28},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {","highlight_start":1,"highlight_end":17},{"text":"            $(lifetimes = [$($lifetime:tt,)*],)*","highlight_start":1,"highlight_end":49},{"text":"            $(name = $name:ty,)*","highlight_start":1,"highlight_end":33},{"text":"            $(ctx = $ctxt: ty,)*","highlight_start":1,"highlight_end":33},{"text":"            $(main_self = $mainself: ident,)*","highlight_start":1,"highlight_end":46},{"text":"            $(outname = {$($outname:tt)*},)*","highlight_start":1,"highlight_end":45},{"text":"            $(scalar = {$($scalar:tt)*},)*","highlight_start":1,"highlight_end":43},{"text":"            $(description = $_desciption: tt,)*","highlight_start":1,"highlight_end":48},{"text":"            $(additional = {$($other: tt)*},)*","highlight_start":1,"highlight_end":47},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = $desc: tt  $($rest:tt)*","highlight_start":1,"highlight_end":39},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                $(lifetimes = [$($lifetime,)*],)*","highlight_start":1,"highlight_end":50},{"text":"                $(name = $name,)*","highlight_start":1,"highlight_end":34},{"text":"                $(ctx = $ctxt,)*","highlight_start":1,"highlight_end":33},{"text":"                $(main_self = $mainself,)*","highlight_start":1,"highlight_end":43},{"text":"                $(outname = {$($outname)*},)*","highlight_start":1,"highlight_end":46},{"text":"                $(scalar = {$($scalar)*},)*","highlight_start":1,"highlight_end":44},{"text":"                description = $desc,","highlight_start":1,"highlight_end":37},{"text":"                $(additional = {$($other)*},)*","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = { $($meta:tt)*},","highlight_start":1,"highlight_end":32},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = description:  $($rest:tt)*","highlight_start":1,"highlight_end":42},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            @parse_description,","highlight_start":1,"highlight_end":32},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = $(#[doc = $desc: tt])*","highlight_start":1,"highlight_end":38},{"text":"        #[deprecated $(( $(since = $since: tt,)* note = $reason: tt ))* ]","highlight_start":1,"highlight_end":74},{"text":"        field $name: ident (","highlight_start":1,"highlight_end":29},{"text":"            $(&$executor: tt)* $(,)*","highlight_start":1,"highlight_end":37},{"text":"            $($(#[doc = $arg_desc: expr])* $arg_name:ident $(= $arg_default: tt)* : $arg_ty: ty),* $(,)*","highlight_start":1,"highlight_end":105},{"text":"        ) -> $return_ty: ty $body: block","highlight_start":1,"highlight_end":41},{"text":"            $($rest:tt)*","highlight_start":1,"highlight_end":25},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_docstring = $arg_desc,)*","highlight_start":1,"highlight_end":55},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(docstring = $desc,)*","highlight_start":1,"highlight_end":39},{"text":"                deprecated = None$(.unwrap_or(Some($reason)))*,","highlight_start":1,"highlight_end":64},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = $(#[doc = $desc: tt])*","highlight_start":1,"highlight_end":38},{"text":"        field $name: ident (","highlight_start":1,"highlight_end":29},{"text":"            $(&$executor: ident)* $(,)*","highlight_start":1,"highlight_end":40},{"text":"            $($(#[doc = $arg_desc: expr])* $arg_name:ident $(= $arg_default: tt)* : $arg_ty: ty),* $(,)*","highlight_start":1,"highlight_end":105},{"text":"        ) -> $return_ty: ty $body: block","highlight_start":1,"highlight_end":41},{"text":"            $($rest:tt)*","highlight_start":1,"highlight_end":25},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_docstring = $arg_desc,)*","highlight_start":1,"highlight_end":55},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(docstring = $desc,)*","highlight_start":1,"highlight_end":39},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = field deprecated $reason:tt $name: ident (","highlight_start":1,"highlight_end":58},{"text":"            $(&$executor: tt)* $(,)*","highlight_start":1,"highlight_end":37},{"text":"            $($arg_name:ident $(= $arg_default: tt)* : $arg_ty: ty $(as $arg_desc: expr)*),* $(,)*","highlight_start":1,"highlight_end":99},{"text":"        ) -> $return_ty: ty $(as $desc: tt)* $body: block","highlight_start":1,"highlight_end":58},{"text":"            $($rest:tt)*","highlight_start":1,"highlight_end":25},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_description = $arg_desc,)*","highlight_start":1,"highlight_end":57},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(decs = $desc,)*","highlight_start":1,"highlight_end":34},{"text":"                deprecated = Some($reason),","highlight_start":1,"highlight_end":44},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = field $name: ident (","highlight_start":1,"highlight_end":36},{"text":"            $(&$executor: ident)* $(,)*","highlight_start":1,"highlight_end":40},{"text":"            $($arg_name:ident $(= $arg_default: tt)* : $arg_ty: ty $(as $arg_desc: expr)*),* $(,)*","highlight_start":1,"highlight_end":99},{"text":"        ) -> $return_ty: ty $(as $desc: tt)* $body: block","highlight_start":1,"highlight_end":58},{"text":"            $($rest:tt)*","highlight_start":1,"highlight_end":25},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)* {","highlight_start":1,"highlight_end":41},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                body = $body,","highlight_start":1,"highlight_end":30},{"text":"                return_ty = $return_ty,","highlight_start":1,"highlight_end":40},{"text":"                args = [","highlight_start":1,"highlight_end":25},{"text":"                    $({","highlight_start":1,"highlight_end":24},{"text":"                        arg_name = $arg_name,","highlight_start":1,"highlight_end":46},{"text":"                        arg_ty = $arg_ty,","highlight_start":1,"highlight_end":42},{"text":"                        $(arg_default = $arg_default,)*","highlight_start":1,"highlight_end":56},{"text":"                        $(arg_description = $arg_desc,)*","highlight_start":1,"highlight_end":57},{"text":"                    },)*","highlight_start":1,"highlight_end":25},{"text":"                ],","highlight_start":1,"highlight_end":19},{"text":"                $(decs = $desc,)*","highlight_start":1,"highlight_end":34},{"text":"                $(executor_var = $executor,)*","highlight_start":1,"highlight_end":46},{"text":"            },],","highlight_start":1,"highlight_end":17},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {","highlight_start":1,"highlight_end":30},{"text":"            callback = $callback: ident,","highlight_start":1,"highlight_end":41},{"text":"            header = {$($header:tt)*},","highlight_start":1,"highlight_end":39},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = $($rest:tt)*","highlight_start":1,"highlight_end":28},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::$callback!(","highlight_start":1,"highlight_end":28},{"text":"            $($header)*","highlight_start":1,"highlight_end":24},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {","highlight_start":1,"highlight_end":34},{"text":"                callback = $callback,","highlight_start":1,"highlight_end":38},{"text":"                header = {$($header)*},","highlight_start":1,"highlight_end":40},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::graphql_object!","def_site_span":{"file_name":"/home/dylan/.cargo/registry/src/github.com-1ecc6299db9ec823/juniper-0.11.1/src/macros/object.rs","byte_start":8678,"byte_end":16815,"line_start":314,"line_end":529,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! graphql_object {","highlight_start":1,"highlight_end":30},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @generate,","highlight_start":1,"highlight_end":19},{"text":"        meta = {","highlight_start":1,"highlight_end":17},{"text":"            lifetimes = [$($lifetimes:tt,)*],","highlight_start":1,"highlight_end":46},{"text":"            name = $name: ty,","highlight_start":1,"highlight_end":30},{"text":"            ctx = $ctx: ty,","highlight_start":1,"highlight_end":28},{"text":"            main_self = $main_self: ident,","highlight_start":1,"highlight_end":43},{"text":"            outname = {$($outname: tt)*},","highlight_start":1,"highlight_end":42},{"text":"            scalar = {$($scalar:tt)*},","highlight_start":1,"highlight_end":39},{"text":"            $(description = $desciption: expr,)*","highlight_start":1,"highlight_end":49},{"text":"            $(additional = {","highlight_start":1,"highlight_end":29},{"text":"                $(interfaces = [$($interface:ty,)*],)*","highlight_start":1,"highlight_end":55},{"text":"            },)*","highlight_start":1,"highlight_end":17},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        items = [$({","highlight_start":1,"highlight_end":21},{"text":"            name = $fn_name: ident,","highlight_start":1,"highlight_end":36},{"text":"            body = $body: block,","highlight_start":1,"highlight_end":33},{"text":"            return_ty = $return_ty: ty,","highlight_start":1,"highlight_end":40},{"text":"            args = [$({","highlight_start":1,"highlight_end":24},{"text":"                arg_name = $arg_name : ident,","highlight_start":1,"highlight_end":46},{"text":"                arg_ty = $arg_ty: ty,","highlight_start":1,"highlight_end":38},{"text":"                $(arg_default = $arg_default: expr,)*","highlight_start":1,"highlight_end":54},{"text":"                $(arg_description = $arg_description: expr,)*","highlight_start":1,"highlight_end":62},{"text":"                $(arg_docstring = $arg_docstring: expr,)*","highlight_start":1,"highlight_end":58},{"text":"            },)*],","highlight_start":1,"highlight_end":19},{"text":"            $(decs = $fn_description: expr,)*","highlight_start":1,"highlight_end":46},{"text":"            $(docstring = $docstring: expr,)*","highlight_start":1,"highlight_end":46},{"text":"            $(deprecated = $deprecated: expr,)*","highlight_start":1,"highlight_end":48},{"text":"            $(executor_var = $executor: ident,)*","highlight_start":1,"highlight_end":49},{"text":"        },)*],","highlight_start":1,"highlight_end":15},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_impl_trait!(","highlight_start":1,"highlight_end":39},{"text":"            impl<$($scalar)* $(, $lifetimes)* > GraphQLType for $name {","highlight_start":1,"highlight_end":72},{"text":"                type Context = $ctx;","highlight_start":1,"highlight_end":37},{"text":"                type TypeInfo = ();","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn name(_ : &Self::TypeInfo) -> Option<&str> {","highlight_start":1,"highlight_end":63},{"text":"                    Some($($outname)*)","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn meta<'r>(","highlight_start":1,"highlight_end":29},{"text":"                    info: &Self::TypeInfo,","highlight_start":1,"highlight_end":43},{"text":"                    registry: &mut $crate::Registry<'r, $crate::__juniper_insert_generic!($($scalar)+)>","highlight_start":1,"highlight_end":104},{"text":"                ) -> $crate::meta::MetaType<'r, $crate::__juniper_insert_generic!($($scalar)+)>","highlight_start":1,"highlight_end":96},{"text":"                where for<'__b> &'__b $crate::__juniper_insert_generic!($($scalar)+): $crate::ScalarRefValue<'__b>,","highlight_start":1,"highlight_end":116},{"text":"                    $crate::__juniper_insert_generic!($($scalar)+): 'r","highlight_start":1,"highlight_end":71},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    let fields = &[$(","highlight_start":1,"highlight_end":38},{"text":"                        registry.field_convert::<$return_ty, _, Self::Context>(","highlight_start":1,"highlight_end":80},{"text":"                            &$crate::to_camel_case(stringify!($fn_name)),","highlight_start":1,"highlight_end":74},{"text":"                            info","highlight_start":1,"highlight_end":33},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                            $(.description($fn_description))*","highlight_start":1,"highlight_end":62},{"text":"                            .push_docstring(&[$($docstring,)*])","highlight_start":1,"highlight_end":64},{"text":"                            $(.deprecated($deprecated))*","highlight_start":1,"highlight_end":57},{"text":"                            $(.argument(","highlight_start":1,"highlight_end":41},{"text":"                                $crate::__juniper_create_arg!(","highlight_start":1,"highlight_end":63},{"text":"                                    registry = registry,","highlight_start":1,"highlight_end":57},{"text":"                                    info = info,","highlight_start":1,"highlight_end":49},{"text":"                                    arg_ty = $arg_ty,","highlight_start":1,"highlight_end":54},{"text":"                                    arg_name = $arg_name,","highlight_start":1,"highlight_end":58},{"text":"                                    $(default = $arg_default,)*","highlight_start":1,"highlight_end":64},{"text":"                                    $(description = $arg_description,)*","highlight_start":1,"highlight_end":72},{"text":"                                    $(docstring = $arg_docstring,)*","highlight_start":1,"highlight_end":68},{"text":"                                )","highlight_start":1,"highlight_end":34},{"text":"                            ))*,","highlight_start":1,"highlight_end":33},{"text":"                    )*];","highlight_start":1,"highlight_end":25},{"text":"                    registry.build_object_type::<$name>(","highlight_start":1,"highlight_end":57},{"text":"                        info, fields","highlight_start":1,"highlight_end":37},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                        $(.description($desciption))*","highlight_start":1,"highlight_end":54},{"text":"                        $($(.interfaces(&[","highlight_start":1,"highlight_end":43},{"text":"                           $(registry.get_type::<$interface>(&()),)*","highlight_start":1,"highlight_end":69},{"text":"                        ]))*)*","highlight_start":1,"highlight_end":31},{"text":"                        .into_meta()","highlight_start":1,"highlight_end":37},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn concrete_type_name(&self, _: &Self::Context, _: &Self::TypeInfo) -> String {","highlight_start":1,"highlight_end":96},{"text":"                    $($outname)*.to_owned()","highlight_start":1,"highlight_end":44},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[allow(unused_variables)]","highlight_start":1,"highlight_end":43},{"text":"                fn resolve_field(","highlight_start":1,"highlight_end":34},{"text":"                    &$main_self,","highlight_start":1,"highlight_end":33},{"text":"                    info: &Self::TypeInfo,","highlight_start":1,"highlight_end":43},{"text":"                    field: &str,","highlight_start":1,"highlight_end":33},{"text":"                    args: &$crate::Arguments<$crate::__juniper_insert_generic!($($scalar)+)>,","highlight_start":1,"highlight_end":94},{"text":"                    executor: &$crate::Executor<Self::Context, $crate::__juniper_insert_generic!($($scalar)+)>","highlight_start":1,"highlight_end":111},{"text":"                ) -> $crate::ExecutionResult<$crate::__juniper_insert_generic!($($scalar)+)> {","highlight_start":1,"highlight_end":95},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        if field == &$crate::to_camel_case(stringify!($fn_name)) {","highlight_start":1,"highlight_end":83},{"text":"                            let result: $return_ty = (|| {","highlight_start":1,"highlight_end":59},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    let $arg_name: $arg_ty = args.get(&$crate::to_camel_case(stringify!($arg_name)))","highlight_start":1,"highlight_end":117},{"text":"                                        .expect(concat!(","highlight_start":1,"highlight_end":57},{"text":"                                            \"Argument \",","highlight_start":1,"highlight_end":57},{"text":"                                            stringify!($arg_name),","highlight_start":1,"highlight_end":67},{"text":"                                            \" missing - validation must have failed\"","highlight_start":1,"highlight_end":85},{"text":"                                        ));","highlight_start":1,"highlight_end":44},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    let $executor = &executor;","highlight_start":1,"highlight_end":63},{"text":"                                )*","highlight_start":1,"highlight_end":35},{"text":"                                $body","highlight_start":1,"highlight_end":38},{"text":"                            })();","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            return $crate::IntoResolvable::into(result, executor.context())","highlight_start":1,"highlight_end":92},{"text":"                                .and_then(|res| {","highlight_start":1,"highlight_end":50},{"text":"                                    match res {","highlight_start":1,"highlight_end":48},{"text":"                                        Some((ctx, r)) => {","highlight_start":1,"highlight_end":60},{"text":"                                            executor.replaced_context(ctx)","highlight_start":1,"highlight_end":75},{"text":"                                                .resolve_with_ctx(&(), &r)","highlight_start":1,"highlight_end":75},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        None => Ok($crate::Value::null())","highlight_start":1,"highlight_end":74},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    )*","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    panic!(\"Field {} not found on type {}\", field, $($outname)*);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @parse_interfaces,","highlight_start":1,"highlight_end":27},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = {","highlight_start":1,"highlight_end":17},{"text":"            lifetimes = [$($lifetime:tt,)*],","highlight_start":1,"highlight_end":45},{"text":"            name = $name:ty,","highlight_start":1,"highlight_end":29},{"text":"            ctx = $ctxt: ty,","highlight_start":1,"highlight_end":29},{"text":"            main_self = $mainself: ident,","highlight_start":1,"highlight_end":42},{"text":"            outname = {$($outname:tt)*},","highlight_start":1,"highlight_end":41},{"text":"            scalar = {$($scalar:tt)*},","highlight_start":1,"highlight_end":39},{"text":"            $(description = $desciption: tt,)*","highlight_start":1,"highlight_end":47},{"text":"            $(additional = {","highlight_start":1,"highlight_end":29},{"text":"                $(interfaces = [$($_interface:ty,)*],)*","highlight_start":1,"highlight_end":56},{"text":"            },)*","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = [$($interface: ty),+]  $($rest:tt)*","highlight_start":1,"highlight_end":51},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = {","highlight_start":1,"highlight_end":21},{"text":"                lifetimes = [$($lifetime,)*],","highlight_start":1,"highlight_end":46},{"text":"                name = $name,","highlight_start":1,"highlight_end":30},{"text":"                ctx = $ctxt,","highlight_start":1,"highlight_end":29},{"text":"                main_self = $mainself,","highlight_start":1,"highlight_end":39},{"text":"                outname = {$($outname)*},","highlight_start":1,"highlight_end":42},{"text":"                scalar = {$($scalar)*},","highlight_start":1,"highlight_end":40},{"text":"                $(description = $desciption,)*","highlight_start":1,"highlight_end":47},{"text":"                additional = {","highlight_start":1,"highlight_end":31},{"text":"                        interfaces = [$($interface,)*],","highlight_start":1,"highlight_end":56},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @parse_interfaces,","highlight_start":1,"highlight_end":27},{"text":"        success_callback = $success_callback: ident,","highlight_start":1,"highlight_end":53},{"text":"        additional_parser = {$($additional:tt)*},","highlight_start":1,"highlight_end":50},{"text":"        meta = { $($meta:tt)* },","highlight_start":1,"highlight_end":33},{"text":"        items = [$({$($items: tt)*},)*],","highlight_start":1,"highlight_end":41},{"text":"        rest = interfaces: $($rest:tt)*","highlight_start":1,"highlight_end":40},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::graphql_object!(","highlight_start":1,"highlight_end":33},{"text":"            @parse_interfaces,","highlight_start":1,"highlight_end":31},{"text":"            success_callback = $success_callback,","highlight_start":1,"highlight_end":50},{"text":"            additional_parser = {$($additional)*},","highlight_start":1,"highlight_end":51},{"text":"            meta = { $($meta)* },","highlight_start":1,"highlight_end":34},{"text":"            items = [$({$($items)*},)*],","highlight_start":1,"highlight_end":41},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        @parse,","highlight_start":1,"highlight_end":16},{"text":"        meta = {$($meta:tt)*},","highlight_start":1,"highlight_end":31},{"text":"        rest = $($rest:tt)*","highlight_start":1,"highlight_end":28},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_field_list!(","highlight_start":1,"highlight_end":45},{"text":"            success_callback = graphql_object,","highlight_start":1,"highlight_end":47},{"text":"            additional_parser = {","highlight_start":1,"highlight_end":34},{"text":"                callback = graphql_object,","highlight_start":1,"highlight_end":43},{"text":"                header = {@parse_interfaces,},","highlight_start":1,"highlight_end":47},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            meta = {$($meta)*},","highlight_start":1,"highlight_end":32},{"text":"            items = [],","highlight_start":1,"highlight_end":24},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@$($stuff:tt)*) => {","highlight_start":1,"highlight_end":26},{"text":"        compile_error!(\"Invalid syntax for `graphql_object!`\");","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__juniper_parse_object_header!(","highlight_start":1,"highlight_end":48},{"text":"            callback = graphql_object,","highlight_start":1,"highlight_end":39},{"text":"            rest = $($rest)*","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/schema.rs","byte_start":2475,"byte_end":2497,"line_start":94,"line_end":94,"column_start":51,"column_end":73,"is_primary":false,"text":[{"text":"    field commandRaw(&executor, data : String) -> FieldResult<TxSuccess>","highlight_start":51,"highlight_end":73}],"label":"expected due to this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Result<TxSuccess, FieldError>`\n   found enum `Result<Result<TxSuccess, std::io::Error>, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/schema.rs:77:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgraphql_object!(MutationRoot : Context as \"Mutation\" |&self| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // Mutation commands\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    field commandRaw(&executor, data : String) -> FieldResult<TxSuccess>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected due to this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m});\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `TxSuccess`, found enum `Result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `Result<TxSuccess, \u001b[0m\u001b[0m\u001b[1mFieldError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found enum `Result<\u001b[0m\u001b[0m\u001b[1mResult<\u001b[0m\u001b[0mTxSuccess, \u001b[0m\u001b[0m\u001b[1mstd::io::Error>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::graphql_object` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 12 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 12 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0308, E0369, E0412, E0425, E0616.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0369, E0412, E0425, E0616.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
